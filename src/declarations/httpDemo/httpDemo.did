type UserId__1 = principal;
type UserId = principal;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FileInit = 
 record {
   chunkCount: nat;
   fileSize: nat;
   mimeType: text;
   name: text;
 };
type FileInfo2 = 
 record {
   chunkCount: nat;
   createdAt: int;
   fileId: FileId__1;
   fileSize: nat;
   mimeType: text;
   name: text;
   userId: UserId__1;
 };
type FileId__1 = text;
type FileId = text;
type ChunkData = blob;
type BucketActor = 
 service {
   createFile: (FileInit, UserId) -> (opt FileId);
   getFileChunk: (FileId, nat) -> (opt ChunkData) query;
   getFiles: () -> (opt vec FileInfo2) query;
   getMemory: () -> (nat) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackHttpResponse) query;
   putFileChunk: (FileId, nat, ChunkData, UserId) -> ();
 };
service : () -> BucketActor
